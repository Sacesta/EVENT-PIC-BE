name: Build and Deploy Backend

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

jobs:
  lint:
    name: Lint Code
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: self-hosted
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t pic-backend:latest -t pic-backend:${{ github.sha }} .

      - name: Test Docker image
        run: |
          docker run --rm pic-backend:latest node --version

  deploy:
    name: Deploy to Production
    runs-on: self-hosted
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: Production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Stop existing container
        run: |
          docker stop pic-backend || true
          docker rm pic-backend || true

      - name: Run new container
        run: |
          docker run -d \
            --name pic-backend \
            --network pic-network \
            --restart unless-stopped \
            -p 127.0.0.1:5000:5000 \
            -e NODE_ENV=production \
            -e PORT=5000 \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e JWT_SECRET="${{ secrets.JWT_SECRET }}" \
            -e RATE_LIMIT_WINDOW_MS="${{ secrets.RATE_LIMIT_WINDOW_MS }}" \
            -e RATE_LIMIT_MAX_REQUESTS="${{ secrets.RATE_LIMIT_MAX_REQUESTS }}" \
            -e CLOUDINARY_CLOUD_NAME="${{ secrets.CLOUDINARY_CLOUD_NAME }}" \
            -e CLOUDINARY_API_KEY="${{ secrets.CLOUDINARY_API_KEY }}" \
            -e CLOUDINARY_API_SECRET="${{ secrets.CLOUDINARY_API_SECRET }}" \
            -e EMAIL_FROM="${{ secrets.EMAIL_FROM }}" \
            -e EMAIL_USER="${{ secrets.EMAIL_USER }}" \
            -e EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" \
            pic-backend:latest

      - name: Wait for backend to be healthy
        run: |
          echo "Waiting for backend to be healthy..."
          timeout 60 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
          echo "Backend is healthy!"

      - name: Cleanup old images
        run: |
          docker image prune -af --filter "until=24h"

      - name: Deployment notification
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Backend deployed successfully at $(date)"
          else
            echo "❌ Backend deployment failed at $(date)"
          fi

